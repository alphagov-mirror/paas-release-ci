---
resource_types:
  - name: s3-iam
    type: docker-image
    source:
      repository: governmentpaas/s3-resource
      tag: 594eaa9f4d93b2ed32a7e5e1cdea5b380e2f6682

  - name: semver-iam
    type: docker-image
    source:
      repository: governmentpaas/semver-resource
      tag: ecbdd201e122b44de99a40ac9f24407c1a43b9a2

resources:
  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: ((state_bucket_name))
      region_name: ((aws_region))
      key: ((pipeline_trigger_file))

  - name: paas-release-ci
    type: git
    source:
      uri: https://github.com/alphagov/paas-release-ci
      branch: ((branch_name))

  - name: release-ci-tfstate
    type: s3-iam
    source:
      bucket: ((state_bucket_name))
      region_name: ((aws_region))
      versioned_file: release-ci.tfstate

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: ((state_bucket_name))
      versioned_file: ci_build_tag_key
      region_name: ((aws_region))

  - name: ssh-public-key
    type: s3-iam
    source:
      bucket: ((state_bucket_name))
      versioned_file: ci_build_tag_key.pub
      region_name: ((aws_region))

jobs:
  - name: self-update
    plan:
      - get: paas-release-ci
        trigger: true
      - task: self-update-pipeline
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-release-ci
          params:
            SELF_UPDATE_PIPELINE: ((self_update_pipeline))
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            MAKEFILE_ENV_TARGET: ((makefile_env_target))
            CONCOURSE_URL: ((concourse_url))
            GITHUB_ACCESS_TOKEN: ((github_access_token))
            STATE_BUCKET_NAME: ((state_bucket_name))
            RELEASES_BUCKET_NAME: ((releases_bucket_name))
            CF_API: ((cf_api))
            CF_APPS_DOMAIN: ((cf_apps_domain))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                if [ "${SELF_UPDATE_PIPELINE}" != "true" ]; then
                  echo "Self update pipeline is disabled. Skipping. (set SELF_UPDATE_PIPELINE=true to enable)"
                else
                  echo "Self update pipeline is enabled. Updating. (set SELF_UPDATE_PIPELINE=false to disable)"

                  make -C ./paas-release-ci "${MAKEFILE_ENV_TARGET}" pipelines
                fi
      - put: pipeline-trigger
        params: {bump: patch}

  - name: init
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['self-update']
            trigger: true
          - get: paas-release-ci
            passed: ['self-update']
      - task: bootstrap-s3-state
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/curl-ssl
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-release-ci
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                paas-release-ci/scripts/s3init.sh "((state_bucket_name))" release-ci.tfstate paas-release-ci/pipelines/init_files/terraform.tfstate.tpl
                paas-release-ci/scripts/s3init.sh "((state_bucket_name))" ci_build_tag_key paas-release-ci/pipelines/init_files/zero_bytes
                paas-release-ci/scripts/s3init.sh "((state_bucket_name))" ci_build_tag_key.pub paas-release-ci/pipelines/init_files/zero_bytes
                paas-release-ci/scripts/s3init.sh "((state_bucket_name))" no-secrets-needed paas-release-ci/pipelines/init_files/zero_bytes

  - name: terraform
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['init']
            trigger: true
          - get: paas-release-ci
            passed: ['init']
          - get: release-ci-tfstate
      - task: terraform-apply
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/terraform
              tag: 9cad30b5d5889a0b72173f39701d1620e24df82c
          inputs:
            - name: paas-release-ci
            - name: release-ci-tfstate
          outputs:
            - name: updated-release-ci-tfstate
          params:
            TF_VAR_deploy_env: ((deploy_env))
            TF_VAR_releases_bucket_name: ((releases_bucket_name))
            TF_VAR_releases_blobs_bucket_name: ((releases_blobs_bucket_name))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cp release-ci-tfstate/release-ci.tfstate updated-release-ci-tfstate/release-ci.tfstate
                terraform init paas-release-ci/terraform
                echo terraform apply \
                  -auto-approve=true \
                  -state=updated-release-ci-tfstate/release-ci.tfstate \
                  paas-release-ci/terraform
        ensure:
          put: release-ci-tfstate
          params:
            file: updated-release-ci-tfstate/release-ci.tfstate

  - name: generate-ssh-keys
    serial: true
    plan:
      - aggregate:
         - get: ssh-private-key
         - get: ssh-public-key
         - get: pipeline-trigger
           passed: ['terraform']
           trigger: true
      - task: generate-deployments-ssh-keypair
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/git-ssh
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: ssh-private-key
            - name: ssh-public-key
          outputs:
            - name: generated-ssh-private-key
            - name: generated-ssh-public-key
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if [ -s ssh-private-key/ci_build_tag_key ] ; then
                  echo "Deployments private key non-zero size, skipping generation..."
                  echo "Key uploads will fail and this is OK as no new keys have been generated."
                  echo "Existing ssh key is ..."
                  cat ssh-public-key/ci_build_tag_key.pub
                  exit 0
                fi

                echo "Generating new ssh key pair for deployments..."
                ssh-keygen -t rsa -b 4096 -f ci_build_tag_key -N ''
                echo "New ssh key is ..."
                cat ci_build_tag_key.pub
                cp ci_build_tag_key generated-ssh-private-key
                cp ci_build_tag_key.pub generated-ssh-public-key
        on_success:
          try:
            aggregate:
              - put: ssh-private-key
                params:
                  file: generated-ssh-private-key/ci_build_tag_key
              - put: ssh-public-key
                params:
                  file: generated-ssh-public-key/ci_build_tag_key.pub

  - name: dynamic-pipelines
    plan:
      - aggregate:
          - get: pipeline-trigger
            passed: ['generate-ssh-keys']
            trigger: true
          - get: paas-release-ci
            passed: ['terraform']
      - task: build-pipelines
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/self-update-pipelines
              tag: 895cf6752c8ec64af05a3a735186b90acd3db65a
          inputs:
            - name: paas-release-ci
          params:
            DEPLOY_ENV: ((deploy_env))
            BRANCH: ((branch_name))
            MAKEFILE_ENV_TARGET: ((makefile_env_target))
            CONCOURSE_ATC_PASSWORD: ((concourse_atc_password))
            CONCOURSE_URL: ((concourse_url))
            GITHUB_ACCESS_TOKEN: ((github_access_token))
            STATE_BUCKET_NAME: ((state_bucket_name))
            RELEASES_BUCKET_NAME: ((releases_bucket_name))
            CF_API: ((cf_api))
            CF_USER: ((cf_user))
            CF_PASSWORD: ((cf_password))
            CF_APPS_DOMAIN: ((cf_apps_domain))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                make -C ./paas-release-ci "${MAKEFILE_ENV_TARGET}" boshrelease-pipelines
                make -C ./paas-release-ci "${MAKEFILE_ENV_TARGET}" app-deployment-pipelines
                make -C ./paas-release-ci "${MAKEFILE_ENV_TARGET}" integration-test-pipelines
