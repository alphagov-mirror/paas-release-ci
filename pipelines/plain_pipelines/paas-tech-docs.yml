---

resource_types:
  - name: s3-iam
    type: docker-image
    check_every: 24h
    source:
      repository: governmentpaas/s3-resource
      tag: fda60bf4c5f85e96c16f704e128e5ead9e84d30d

  - name: slack-notification-resource
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: paas-tech-docs
    type: git
    check_every: 1m
    source:
      uri: https://github.com/alphagov/paas-tech-docs.git
      branch: master

  - name: slack-notification
    type: slack-notification-resource
    source:
      url: ((slack_webhook_url))

  - name: dockerhub-secrets
    type: s3-iam
    check_every: 24h
    source:
      bucket: ((state_bucket))
      region_name: ((aws_region))
      versioned_file: dockerhub-secrets.yml

jobs:
  - name: docker-container-build
    plan:
      - get: paas-tech-docs
        trigger: true
      - get: dockerhub-secrets
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: rbekker87/build-tools
              tag: latest
          inputs:
            - name: paas-tech-docs
            - name: dockerhub-secrets
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                cd paas-tech-docs/
                dockerrebuild=$(git diff $(git log --merges --pretty=format:"%H" --max-count=1 --skip=1) -- Gemfile.lock Dockerfile)
                if [[ $? != 0 ]]; then
                    echo "Command failed."
                elif [[ $dockerrebuild ]]; then
                    echo "Let's rebuild the docker container."
                    docker login -u (( grab dockerhub_id  )) -p (( grab dockerhub_password  ))
                	docker build -t governmentpaas/tech-docs:master .
                	docker push governmentpaas/tech-docs:master
                else
                    echo "No need to rebuild the docker container."
                fi
        on_failure: &slack_failure_notification
          put: slack-notification
          params:
            text: "Job $BUILD_NAME in $BUILD_JOB_NAME on $BUILD_PIPELINE_NAME failed. Check the logs at $ATC_EXTERNAL_URL/builds/$BUILD_ID."
  - name: test
    plan:
      - get: paas-tech-docs
        trigger: true
      - task: test
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/tech-docs
              tag: latest
          inputs:
            - name: paas-tech-docs
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                make -C paas-tech-docs test
        on_failure: &slack_failure_notification
          put: slack-notification
          params:
            text: "Job $BUILD_NAME in $BUILD_JOB_NAME on $BUILD_PIPELINE_NAME failed. Check the logs at $ATC_EXTERNAL_URL/builds/$BUILD_ID."

  - name: deploy
    serial: true
    plan:
      - get: paas-tech-docs
        passed: ['test']
        trigger: true
      - task: build
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/tech-docs
              tag: latest
          inputs:
            - name: paas-tech-docs
          outputs:
            - name: files-to-push
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                make -C paas-tech-docs build

                echo "Copying files to destination..."
                cp -pr "paas-tech-docs/." files-to-push
                ls -l files-to-push
        on_failure: *slack_failure_notification

      - task: push
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/cf-cli
              tag: 0eff5b6a9c092f865a2b19cc4e75a3b539b82fa2
          inputs:
            - name: files-to-push
          params:
            CF_API: https://api.((cf_system_domain))
            CF_USER: ((cf_user))
            CF_PASSWORD: ((cf_password))
            CF_ORG: govuk-paas
            CF_SPACE: docs
            CF_APPS_DOMAIN: ((cf_apps_domain))
            CF_SYSTEM_DOMAIN: ((cf_system_domain))
          run:
            path: sh
            args:
              - -e
              - -u
              - -c
              - |
                echo "Logging on to Cloudfoundry..."
                cf login \
                  -a "${CF_API}" \
                  -u "${CF_USER}" \
                  -p "${CF_PASSWORD}" \
                  -o "${CF_ORG}" \
                  -s "${CF_SPACE}"

                cd files-to-push

                echo "Generating manifest template"
                cat <<EOF | tee manifest.yml
                ---
                applications:
                - name: paas-tech-docs
                  memory: 64M
                  path: build
                  buildpack: staticfile_buildpack
                  instances: 2
                  stack: cflinuxfs3
                  routes:
                  - route: "docs.${CF_SYSTEM_DOMAIN}"

                - name: paas-tech-docs-redirect
                  buildpack: staticfile_buildpack
                  path: redirect
                  memory: 32M
                  instances: 2
                  stack: cflinuxfs3
                  routes:
                  - route: "paas-tech-docs.${CF_APPS_DOMAIN}"
                  env:
                    REDIRECT_DOMAIN: "docs.${CF_SYSTEM_DOMAIN}"
                EOF

                cf zero-downtime-push paas-tech-docs -f manifest.yml
                cf zero-downtime-push paas-tech-docs-redirect -f manifest.yml
        on_failure: *slack_failure_notification
